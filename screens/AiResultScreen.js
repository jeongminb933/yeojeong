import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { AntDesign } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';

function buildPrompt({ companion, style, budget, location, city, extra }) {
  return `
ÎÑàÎäî Ï†ÑÎ¨∏ Ïó¨Ìñâ ÌîåÎûòÎÑàÏïº.

ÎÇòÎäî 2025ÎÖÑ 7Ïõî 1ÏùºÎ∂ÄÌÑ∞ 3ÏùºÍπåÏßÄ ${location}Ïùò ${city}Î•º Ïó¨ÌñâÌï† Í±∞Ïïº.
ÎèôÎ∞òÏûêÎäî ${companion}Ïù¥Í≥†, Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÄ ${style}Ïù¥Ïïº.
ÏòàÏÇ∞ÏùÄ ÏïΩ ${budget}ÏõêÏù¥Í≥†, Ï∂îÍ∞Ä ÏöîÏ≤≠ÏùÄ "${extra || 'ÏóÜÏùå'}"Ïù¥Ïïº.

üìå Î∞òÎìúÏãú Îã§Ïùå Ï°∞Í±¥ÏùÑ Îî∞ÎùºÏïº Ìï¥:

1. Î∞òÎìúÏãú ÏàúÏàòÌïú JSONÎßå ÏùëÎãµÌï† Í≤É (ÏÑ§Î™ÖÏù¥ÎÇò ÌÖçÏä§Ìä∏ Í∏àÏßÄ)
2. ÏïÑÎûò ÌòïÏãùÏùÑ Ï†ïÌôïÌûà Îî∞Î•º Í≤É
3. Í∞Å ÎÇ†Ïßú(day1, day2, day3)Ïóê ÏµúÏÜå 3~5Í∞úÏùò ÏùºÏ†ï Ìè¨Ìï®
4. ÏãúÍ∞Ñ(time)ÏùÄ "HH:MM" ÌòïÏãù, activityÎäî "Í∞ÑÎã®Ìïú ÏÑ§Î™Ö"ÏúºÎ°ú
5. ÌïúÍµ≠Ïù∏ Í¥ÄÍ¥ëÍ∞ù Í∏∞Ï§ÄÏúºÎ°ú ÎßõÏßë/Ï≤¥Ìóò/ÏáºÌïëÎèÑ Ìè¨Ìï®

{
  "day1": [
    { "time": "09:00", "activity": "ÎèÑÏøÑÌÉÄÏõåÏóêÏÑú ÏãúÏûë" },
    { "time": "11:00", "activity": "Í∑ºÏ≤ò Ïπ¥ÌéòÏóêÏÑú Ïª§Ìîº" }
  ],
  "day2": [],
  "day3": []
}`;
}

export default function AiResultScreen() {
  const navigation = useNavigation();
  const route = useRoute();
  const { companion, style, budget, location, city, extra } = route.params || {};

  const [loading, setLoading] = useState(true);
  const [jsonResult, setJsonResult] = useState(null);

  useEffect(() => {
    const fetchResult = async () => {
      try {
        const prompt = buildPrompt({ companion, style, budget, location, city, extra });

        const res = await fetch('https://us-central1-yeojeong-bebe4.cloudfunctions.net/generateTravelPlan', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt })
        });

        const data = await res.json();
        const text = data?.text?.trim();

        const jsonStart = text.indexOf('{');
        const jsonEnd = text.lastIndexOf('}');
        if (jsonStart !== -1 && jsonEnd !== -1) {
          const parsed = JSON.parse(text.slice(jsonStart, jsonEnd + 1));
          setJsonResult(parsed);
        } else {
          throw new Error('Gemini ÏùëÎãµÏóêÏÑú JSONÏùÑ Ï∂îÏ∂úÌï† Ïàò ÏóÜÏùå');
        }
      } catch (error) {
        console.error('‚ùå Gemini Ïò§Î•ò', error);
        setJsonResult(null);
      } finally {
        setLoading(false);
      }
    };

    fetchResult();
  }, []);

  return (
    <LinearGradient colors={['#7FC4FD', '#EAF6FF']} style={{ flex: 1 }}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <AntDesign name="arrowleft" size={28} color="white" />
        </TouchableOpacity>
        <Text style={styles.headerText}>AI Ïó¨Ìñâ Ï∂îÏ≤ú Í≤∞Í≥º</Text>
      </View>

      {loading ? (
        <ActivityIndicator size="large" color="white" style={{ marginTop: 100 }} />
      ) : jsonResult ? (
        <ScrollView contentContainerStyle={styles.content}>
          {['day1', 'day2', 'day3'].map((day) => (
            <View key={day} style={styles.dayBlock}>
              <Text style={styles.dayTitle}>{day.toUpperCase()}</Text>
              {jsonResult[day]?.map((item, index) => (
                <Text key={index} style={styles.item}>
                  ‚è∞ {item.time} - {item.activity}
                </Text>
              ))}
            </View>
          ))}
        </ScrollView>
      ) : (
        <Text style={styles.errorText}>Í≤∞Í≥ºÎ•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏñ¥Ïöî.</Text>
      )}
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingTop: 60,
    paddingHorizontal: 20,
  },
  headerText: {
    marginLeft: 12,
    fontSize: 18,
    color: 'white',
    fontWeight: 'bold',
  },
  content: {
    padding: 20,
    paddingBottom: 60,
  },
  dayBlock: {
    marginBottom: 24,
  },
  dayTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#fff',
  },
  item: {
    fontSize: 14,
    backgroundColor: 'white',
    marginBottom: 6,
    padding: 10,
    borderRadius: 8,
    color: '#333',
  },
  errorText: {
    textAlign: 'center',
    marginTop: 100,
    color: 'white',
    fontSize: 16,
  },
});
